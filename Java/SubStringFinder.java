import java.util.Scanner;
import java.util.Arrays;
/**
 * Searches for a given string among the contents of a stored long input String. 
 * 
 * Takes a key String "toFind" as user input. Then, hashes the key and compares that hash value to another  
 * generated by hashing a substring from a stored long input String. 
 *
 * The substring generated from the stored String is delineated by pointers exactly toFind.length() 
 * indices apart, beginning from index 0 of the stored String. The characters at and between the 
 * pointers are made into a substring "searchSub", such that searchSub equals 
 * (A sub i) + (A sub i) + ... + (A sub i+k-1), that is then hashed.
 * 
 * If these two hash values are equal, then toFind and searchSub are compared char by char to ensure  
 * equality.
 *
 * The hash function used here is: hash = hash * 31 + sourceString.charAt(i)
 * 
 * The stored long input String is provided as: "This is the source string that possibly contains the key string"
 * 
 * Includes one method for character comparison of strings.
 * 
 * @author Jerod Dunbar
 * @version 14 July 2017
 * */
public class SubStringFinder{
	public static void main (String[] args){
		int startI = 0;//Represents A sub i.
		int endI;//Represents A sub i+k-1.
		
		System.out.printf("%n%nWelcome to the Substring Finder!%n%n");
		System.out.println("Please enter the string you would like to find: ");
		
		Scanner input = new Scanner(System.in);
		
		String toSearch = "This is the source string that possibly contains the key string";
		String toFind = input.nextLine();
		endI = toFind.length(); 
		
		int keyHash = 0;//The hash value of the toFind key String.
		
		for (int i = 0; i < toFind.length(); i++){
			keyHash += toFind.charAt(i);
		}
		keyHash = keyHash % 67;//Hash the key for simple comparison

		boolean isEqual = false;
		int searchHash;
		String searchSub;
		
		do {
			searchSub = toSearch.substring(startI,endI);
			searchHash = 0;// Zero out the hash value before hashing each new substring.
			
			for (int i = 0; i < searchSub.length(); i++){
				searchHash += searchSub.charAt(i);		
			}
			searchHash = searchHash % 67;//Hash the substring being compared to the key String.
			
			if (searchHash == keyHash){
				isEqual = charCheck(toFind,searchSub);
			}//If charCheck finds that the characters of each String are the same, then isEqual becomes true, ending the loop.
			
			if (isEqual == false){
				startI++;
				endI++;
			}//If charCheck find that the strings don't match, increment the pointers and create a new substring for comparison.
		}while (isEqual == false && endI <= toSearch.length());
	
		if (isEqual == true){// UI output for matches found.  
			System.out.printf("%n%nSearch Term Found!");
			System.out.printf("%n%nMatch Begins at Index: " + startI);
			System.out.printf("%n%npress ENTER to exit");
			
			
			Scanner scan = new Scanner(System.in);
			scan.nextLine();
		}
		
		else{// UI output for no matches found. 
			System.out.printf("%n%nSearch Term Could Not Be Located Within Available Data.");
			System.out.printf("%n%npress ENTER to exit");
			
			Scanner scan = new Scanner(System.in);
			scan.nextLine();
		}
		
	}// End of MAIN
	/**
	 * Returns a boolean equality result based on the char-by-char comparison of two Strings.
	 *
	 * @param key    The user-provided String to be compared
	 * @param query  The generated substring to be compared
	 * @return The result of key == query
	 */
	private static boolean charCheck(String key, String query){
		char[] keyArray = key.toCharArray();
		char[] queryArray = query.toCharArray();
		boolean match = false;
        System.out.println(keyArray);
        System.out.println(queryArray);
		if (Arrays.equals(keyArray, queryArray) == true){
			match = true;
		}
		else{
			match = false;
		}
		return match;
	}// End of charCheck
}//End of class SubStringFinder